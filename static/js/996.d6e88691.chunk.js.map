{"version":3,"file":"static/js/996.d6e88691.chunk.js","mappings":"yOAEaA,EAAOC,EAAAA,GAAAA,KAAH,yCAIJC,EAAQD,EAAAA,GAAAA,MAAH,6F,SCFLE,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,UAACL,EAAD,CAAMM,SAba,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfN,GACEO,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGrCL,EAAKO,OACN,EAG+BC,aAAa,MAA3C,WACE,UAACf,EAAD,oBAEE,kBAAOgB,KAAK,QAAQC,KAAK,cAE3B,UAACjB,EAAD,uBAEE,kBAAOgB,KAAK,WAAWC,KAAK,iBAE9B,mBAAQD,KAAK,SAAb,sBAGL,EC9Bc,SAASE,IACtB,OACE,0BACE,SAACjB,EAAD,KAGL,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.js","Pages/LoginPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 320px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { Form, Label } from './LoginForm.styled';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label>\n        Email\n        <input type=\"email\" name=\"email\" />\n      </Label>\n      <Label>\n        Password\n        <input type=\"password\" name=\"password\" />\n      </Label>\n      <button type=\"submit\">Log In</button>\n    </Form>\n  );\n};\n\n// import { Formik, Form, ErrorMessage } from 'formik';\n// import { useDispatch } from 'react-redux';\n// import { addContact } from '../../redux/contacts/operations';\n// import * as Yup from 'yup';\n// import { nanoid } from 'nanoid';\n// import Input from './NameForm.styled';\n\n// const FormSchema = Yup.object().shape({\n//   name: Yup.string()\n//     .min(2, 'Too Short!')\n//     .max(50, 'Too Long!')\n//     .required('Required'),\n//   number: Yup.string()\n//     .min(2, 'Too Short!')\n//     .max(50, 'Too Long!')\n//     .required('Required'),\n// });\n\n// export const NameForm = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSave = newContact => {\n//     dispatch(addContact(newContact));\n//   };\n//   return (\n//     <Formik\n//       initialValues={{\n//         name: '',\n//         number: '',\n//       }}\n//       validationSchema={FormSchema}\n//       onSubmit={(value, actions) => {\n//         handleSave({\n//           ...value,\n//           id: nanoid(),\n//         });\n//         actions.resetForm();\n//       }}\n//     >\n//       <Form>\n//         <label>\n//           Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//           <ErrorMessage name=\"name\" component=\"span\" />\n//         </label>\n//         <label>\n//           Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//           <ErrorMessage name=\"number\" component=\"span\" />\n//         </label>\n//         <button type=\"submit\">Add contact</button>\n//       </Form>\n//     </Formik>\n//   );\n// };\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["Form","styled","Label","LoginForm","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","autoComplete","type","name","Login"],"sourceRoot":""}