{"version":3,"file":"static/js/121.a3204db3.chunk.js","mappings":"gQAOaA,GAJOC,EAAAA,GAAAA,KAAH,yCAIIA,EAAAA,GAAAA,MAAH,sEAKLC,GAAQD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,8kBA6BLG,EAASH,EAAAA,GAAAA,OAAH,oe,SCnCbI,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KAAaG,IAAI,EAAG,cAAcC,IAAI,GAAI,aAChDC,MAAOL,EAAAA,KAAaK,MAAM,iBAC1BC,SAAUN,EAAAA,KAAaG,IAAI,EAAG,4CAGnBI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAajB,OACE,SAAC,KAAD,CACEC,cAAe,CACbR,KAAM,GACNG,MAAO,GACPC,SAAU,IAEZK,iBAAkBZ,EAClBa,SAnBiB,SAACC,EAAQC,GAC5BN,GACEO,EAAAA,EAAAA,IAAS,CACPb,KAAMW,EAAOX,KACbG,MAAOQ,EAAOR,MACdC,SAAUO,EAAOP,YAGrBQ,EAAQE,WACT,EAGC,SASG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,UAAC,KAAD,CAAMC,aAAa,MAAnB,WACE,UAACzB,EAAD,uBAEE,SAACE,EAAD,CAAOwB,KAAK,OAAOlB,KAAK,OAAOmB,GAAIzB,IAClCqB,EAAOf,MAAQgB,EAAQhB,MAAO,yBAAMe,EAAOf,OAAc,SAE5D,UAACR,EAAD,oBAEE,SAACE,EAAD,CAAOwB,KAAK,QAAQlB,KAAK,QAAQmB,GAAIzB,IACpCqB,EAAOZ,OAASa,EAAQb,OAAQ,yBAAMY,EAAOZ,QAAe,SAE/D,UAACX,EAAD,uBAEE,SAACE,EAAD,CAAOwB,KAAK,WAAWlB,KAAK,WAAWmB,GAAIzB,IAC1CqB,EAAOX,UAAYY,EAAQZ,UAC1B,yBAAMW,EAAOX,WACX,SAEN,SAACR,EAAD,CAAQsB,KAAK,SAAb,wBAnBH,GAwBN,EC1Dc,SAASE,IACtB,OACE,0BACE,SAACf,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.js","Pages/RegisterPage.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field } from 'formik';\n\nexport const Form = styled.form`\n  width: 320px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled(Field)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 300px;\n  box-sizing: border-box;\n  margin: 16px 0;\n  padding: 10px;\n\n  border: 1px solid #000;\n  color: black;\n  border-radius: 5px;\n  padding: 10px 25px;\n  background: #f5f5f5;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: inset 2px 2px 2px 0px rgba(255, 255, 255, 0.5),\n    7px 7px 20px 0px rgba(0, 0, 0, 0.1), 4px 4px 5px 0px rgba(0, 0, 0, 0.1);\n  outline: none;\n\n  &:hover {\n    border-color: orange;\n  }\n\n  &: focus {\n    border-color: orange;\n  }\n`;\n\nexport const Button = styled.button`\n  border: 1px solid #000;\n  padding: 10px 25px;\n  color: black;\n  border-radius: 5px;\n  background: #f5f5f5;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: inset 2px 2px 2px 0px rgba(255, 255, 255, 0.5),\n    7px 7px 20px 0px rgba(0, 0, 0, 0.1), 4px 4px 5px 0px rgba(0, 0, 0, 0.1);\n  outline: none;\n  boxshadow: 0px 0px 2px 2px rgb(red, 0, 0, 5);\n\n  &:hover {\n    border: none;\n    background-color: orange;\n    color: #fff;\n  }\n`;\n","import { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport { Input, Label, Button } from './RegisterForm.styled';\n\nconst RegisterSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!'),\n  email: Yup.string().email('Invalid email'),\n  password: Yup.string().min(6, 'Password must be at least 6 characters'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    dispatch(\n      register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      })\n    );\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={RegisterSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ errors, touched }) => (\n        <Form autoComplete=\"off\">\n          <Label>\n            Username\n            <Input type=\"text\" name=\"name\" as={Input} />\n            {errors.name && touched.name ? <div>{errors.name}</div> : null}\n          </Label>\n          <Label>\n            Email\n            <Input type=\"email\" name=\"email\" as={Input} />\n            {errors.email && touched.email ? <div>{errors.email}</div> : null}\n          </Label>\n          <Label>\n            Password\n            <Input type=\"password\" name=\"password\" as={Input} />\n            {errors.password && touched.password ? (\n              <div>{errors.password}</div>\n            ) : null}\n          </Label>\n          <Button type=\"submit\">Register</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { RegisterForm } from '../components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["Label","styled","Input","Field","Button","RegisterSchema","Yup","shape","name","min","max","email","password","RegisterForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","register","resetForm","errors","touched","autoComplete","type","as","Register"],"sourceRoot":""}